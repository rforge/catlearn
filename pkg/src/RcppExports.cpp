// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// slpALCOVE
List slpALCOVE(List st, NumericMatrix tr, std::string dec, bool humble, bool attcon, double absval, bool xtdo);
RcppExport SEXP catlearn_slpALCOVE(SEXP stSEXP, SEXP trSEXP, SEXP decSEXP, SEXP humbleSEXP, SEXP attconSEXP, SEXP absvalSEXP, SEXP xtdoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type st(stSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tr(trSEXP);
    Rcpp::traits::input_parameter< std::string >::type dec(decSEXP);
    Rcpp::traits::input_parameter< bool >::type humble(humbleSEXP);
    Rcpp::traits::input_parameter< bool >::type attcon(attconSEXP);
    Rcpp::traits::input_parameter< double >::type absval(absvalSEXP);
    Rcpp::traits::input_parameter< bool >::type xtdo(xtdoSEXP);
    rcpp_result_gen = Rcpp::wrap(slpALCOVE(st, tr, dec, humble, attcon, absval, xtdo));
    return rcpp_result_gen;
END_RCPP
}
// slpCOVIS
List slpCOVIS(List st, NumericMatrix tr, bool crx, bool respt, bool rgive, bool xtdo);
RcppExport SEXP catlearn_slpCOVIS(SEXP stSEXP, SEXP trSEXP, SEXP crxSEXP, SEXP resptSEXP, SEXP rgiveSEXP, SEXP xtdoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type st(stSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tr(trSEXP);
    Rcpp::traits::input_parameter< bool >::type crx(crxSEXP);
    Rcpp::traits::input_parameter< bool >::type respt(resptSEXP);
    Rcpp::traits::input_parameter< bool >::type rgive(rgiveSEXP);
    Rcpp::traits::input_parameter< bool >::type xtdo(xtdoSEXP);
    rcpp_result_gen = Rcpp::wrap(slpCOVIS(st, tr, crx, respt, rgive, xtdo));
    return rcpp_result_gen;
END_RCPP
}
